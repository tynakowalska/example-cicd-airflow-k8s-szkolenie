name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: pre-commit
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=min

      - name: Run unit tests
        run: |
          docker run --rm --entrypoint python \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -m pytest tests --verbose --cov=src

      - name: Template DAG with Docker image
        env:
          DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |
          echo "Templating DAG with Docker image: ${DOCKER_IMAGE}"
          docker run --user root --rm -v $(pwd):/workspace -w /workspace --entrypoint jinja2 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            src/ml_pipeline_dag.py.j2 -D docker_image="${DOCKER_IMAGE}" -o /workspace/ml_pipeline_dag.py
          echo "DAG file after templating:"
          cat ml_pipeline_dag.py

      - name: Validate Airflow DAG
        run: |
          # Validate the templated DAG
          docker run --rm -v $(pwd):/workspace -w /workspace --entrypoint python \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            ml_pipeline_dag.py

      - name: Push Docker image
        if: github.event_name == 'push'
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Synchronizing DAGs
        if: github.event_name == 'push'
        env:
          S3_ENDPOINT_URL: ${{ secrets.S3_ENDPOINT_URL }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "Synchronizing DAGs to S3 bucket"
          aws s3 cp ml_pipeline_dag.py s3://${BUCKET_NAME}/pvc-01799f6e-a70d-44a8-b922-4015b7014dd7/ml_pipeline_dag.py --endpoint-url ${S3_ENDPOINT_URL}
